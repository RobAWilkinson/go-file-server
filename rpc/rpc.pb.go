// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Picture
	Request
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Picture struct {
	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Type  []byte `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Picture) Reset()                    { *m = Picture{} }
func (m *Picture) String() string            { return proto.CompactTextString(m) }
func (*Picture) ProtoMessage()               {}
func (*Picture) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Picture) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Picture) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

// The response message containing the greetings
type Request struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func init() {
	proto.RegisterType((*Picture)(nil), "rpc.Picture")
	proto.RegisterType((*Request)(nil), "rpc.Request")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Files service

type FilesClient interface {
	// Sends a greeting
	GetImage(ctx context.Context, in *Request, opts ...grpc.CallOption) (Files_GetImageClient, error)
}

type filesClient struct {
	cc *grpc.ClientConn
}

func NewFilesClient(cc *grpc.ClientConn) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) GetImage(ctx context.Context, in *Request, opts ...grpc.CallOption) (Files_GetImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Files_serviceDesc.Streams[0], c.cc, "/rpc.Files/GetImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesGetImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Files_GetImageClient interface {
	Recv() (*Picture, error)
	grpc.ClientStream
}

type filesGetImageClient struct {
	grpc.ClientStream
}

func (x *filesGetImageClient) Recv() (*Picture, error) {
	m := new(Picture)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Files service

type FilesServer interface {
	// Sends a greeting
	GetImage(*Request, Files_GetImageServer) error
}

func RegisterFilesServer(s *grpc.Server, srv FilesServer) {
	s.RegisterService(&_Files_serviceDesc, srv)
}

func _Files_GetImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServer).GetImage(m, &filesGetImageServer{stream})
}

type Files_GetImageServer interface {
	Send(*Picture) error
	grpc.ServerStream
}

type filesGetImageServer struct {
	grpc.ServerStream
}

func (x *filesGetImageServer) Send(m *Picture) error {
	return x.ServerStream.SendMsg(m)
}

var _Files_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Files",
	HandlerType: (*FilesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImage",
			Handler:       _Files_GetImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x32, 0xe6, 0x62, 0x0f, 0xc8,
	0x4c, 0x2e, 0x29, 0x2d, 0x4a, 0x15, 0x12, 0xe1, 0x62, 0xcd, 0xcc, 0x4d, 0x4c, 0x4f, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x70, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x25,
	0x98, 0xc0, 0x82, 0x60, 0xb6, 0x92, 0x2a, 0x17, 0x7b, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89,
	0x90, 0x14, 0x17, 0x47, 0x5a, 0x66, 0x4e, 0x6a, 0x5e, 0x62, 0x2e, 0x44, 0x1f, 0x67, 0x10, 0x9c,
	0x6f, 0x64, 0xcc, 0xc5, 0xea, 0x96, 0x99, 0x93, 0x5a, 0x2c, 0xa4, 0xc5, 0xc5, 0xe1, 0x9e, 0x5a,
	0xe2, 0x09, 0x36, 0x8f, 0x47, 0x0f, 0xe4, 0x02, 0xa8, 0x76, 0x29, 0x08, 0x0f, 0xea, 0x02, 0x25,
	0x06, 0x03, 0x46, 0x27, 0x43, 0x2e, 0x99, 0xcc, 0x7c, 0xbd, 0xf4, 0x0c, 0x90, 0x78, 0x6a, 0x45,
	0x62, 0x6e, 0x41, 0x4e, 0x6a, 0xb1, 0x5e, 0x46, 0x6a, 0x4e, 0x4e, 0x7e, 0x79, 0x7e, 0x51, 0x4e,
	0x8a, 0x13, 0xbf, 0x07, 0x88, 0x1d, 0x0e, 0x62, 0x07, 0x80, 0xbc, 0x11, 0xc0, 0x98, 0xc4, 0x06,
	0xf6, 0x8f, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xcd, 0x9a, 0x99, 0xdc, 0x00, 0x00, 0x00,
}
